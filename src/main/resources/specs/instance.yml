openapi: 3.1.0
info:
  title: Instance API
  description: |
    REST API endpoints for Instance
  version: 1.0.0
servers:
  - url: http://localhost:8089/api/v1/openerpmailsender
    description: Development server
paths:
  /instances:
    post:
      tags:
        - Instance
      summary: create an instance in database
      operationId: createInstance
      security:
        - oAuth:
            - create:instance
      requestBody:
        required: true
        description: instance object we need to create in database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInstanceRequestDto'
      responses:
        201:
          description: successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessResponseDto'
        400:
          description: bad operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
        404:
          description: not found operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
        409:
          description: conflict operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
    get:
      tags:
        - Instance
      summary: Fetch all instance from database
      operationId: fetchInstances
      security:
        - oAuth:
            - read:instance
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/attribute'
      responses:
        200:
          description: successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessResponseDto'
        400:
          description: bad operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
        404:
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
  /instances/search:
    get:
      tags:
        - Instance
      summary: Fetch all instance matching a keyword
      operationId: fetchInstanceByKeyword
      security:
        - oAuth:
            - read:instance
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/keyword'
      responses:
        200:
          description: successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessResponseDto'
        400:
          description: bad operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
        404:
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
  /instances/{instanceId}:
    put:
      tags:
        - Instance
      summary: update an instance in database
      operationId: updateInstance
      security:
        - oAuth:
            - update:instance
      parameters:
        - $ref: '#/components/parameters/instanceId'
      requestBody:
        required: true
        description: instance object we need to update in database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInstanceRequestDto'
      responses:
        201:
          description: successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessResponseDto'
        400:
          description: bad operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
        404:
          description: not found operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
        409:
          description: conflict operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
    get:
      tags:
        - Instance
      summary: Return instance fetched from database with provided id
      operationId: fetchInstanceById
      security:
        - oAuth:
            - read:instance
      parameters:
        - $ref: '#/components/parameters/instanceId'
      responses:
        200:
          description: successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessResponseDto'
        404:
          description: mail server nor found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
  /instances/active/{instanceId}:
    put:
      tags:
        - Instance
      summary: activate an instance in database
      operationId: activateInstance
      security:
        - oAuth:
            - update:activate:instance
      parameters:
        - $ref: '#/components/parameters/instanceId'
      responses:
        200:
          description: successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessResponseDto'
        400:
          description: bad operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
        404:
          description: not found operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
  /instances/inactive/{instanceId}:
    put:
      tags:
        - Instance
      summary: inactive an instance in database
      operationId: inactiveInstance
      security:
        - oAuth:
            - update:inactive:instance
      parameters:
        - $ref: '#/components/parameters/instanceId'
      responses:
        200:
          description: successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessResponseDto'
        400:
          description: bad operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
        404:
          description: not found operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'

components:
  parameters:
    instanceId:
      name: instanceId
      in: path
      required: true
      schema:
        type: string
    page:
      name: page
      in: query
      required: true
      schema:
        type: integer
    size:
      name: size
      in: query
      required: true
      schema:
        type: integer
    direction:
      name: direction
      in: query
      required: true
      schema:
        type: string
        enum:
          - ASC
          - DSC
    attribute:
      name: attribute
      in: query
      required: true
      schema:
        type: string
    keyword:
      name: keyword
      in: query
      required: true
      schema:
        type: string
  schemas:
    ValidationErrorDto:
      type: object
      required:
        - field
        - message
      properties:
        field:
          type: string
        message:
          type: string
    ApiResponseDto:
      type: object
      required:
        - timestamp
        - code
        - status
        - success
      properties:
        timestamp:
          type: string
        code:
          type: integer
          format: int32
        status:
          type: string
        success:
          type: boolean
    ApiSuccessResponseDto:
      allOf:
        - $ref: '#/components/schemas/ApiResponseDto'
        - type: object
          properties:
            message:
              type: string
            data:
              type: object
              additionalProperties:
                type: object
    ApiErrorResponseDto:
      allOf:
        - $ref: '#/components/schemas/ApiResponseDto'
        - type: object
          required:
            - reason
            - path
            - trackId
          properties:
            reason:
              type: string
            developerMessage:
              type: string
            path:
              type: string
            trackId:
              type: string
              format: uuid
            error:
              type: array
              items:
                $ref: '#/components/schemas/ValidationErrorDto'
    CreateInstanceRequestDto:
      type: object
      required:
        - host
        - port
        - username
        - password
        - db
        - mailServer
      properties:
        host:
          type: string
          format: url
        port:
          type: integer
          format: int32
        db:
          type: string
        username:
          type: string
        password:
          type: string
        mailServer:
          $ref: '#/components/schemas/MailServerDto'
    UpdateInstanceRequestDto:
      type: object
      required:
        - id
        - host
        - port
        - username
        - password
        - db
        - mailServer
        - state
      properties:
        id:
          type: string
        host:
          type: string
          format: url
        port:
          type: integer
          format: int32
        db:
          type: string
        username:
          type: string
        password:
          type: string
        mailServer:
          $ref: '#/components/schemas/MailServerDto'
        state:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
    MailServerDto:
      type: object
      required:
        - id
        - name
        - fromEmail
        - type
        - host
        - port
      properties:
        id:
          type: string
        name:
          type: string
        fromEmail:
          type: string
        type:
          type: string
          enum:
            - GOOGLE
            - YAHOO
            - MICROSOFT
            - OTHER
        host:
          type: string
        port:
          type: integer
          format: int32
        useSSL:
          type: boolean
        useAuth:
          type: boolean
        username:
          type: string
          format: email
        password:
          type: string
          format: password
        protocol:
          type: string
        state:
          type: string
          enum:
            - NEW
            - WAITING
            - CONFIRM

